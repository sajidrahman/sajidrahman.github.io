<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>How-to | Sajid Rahman</title>
    <link>https://sajidrahman.github.io/category/how-to/</link>
      <atom:link href="https://sajidrahman.github.io/category/how-to/index.xml" rel="self" type="application/rss+xml" />
    <description>How-to</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© {2021} Sajid Rahman</copyright><lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://sajidrahman.github.io/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>How-to</title>
      <link>https://sajidrahman.github.io/category/how-to/</link>
    </image>
    
    <item>
      <title>Customizing iTerm2</title>
      <link>https://sajidrahman.github.io/post/customizing-iterm2/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://sajidrahman.github.io/post/customizing-iterm2/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve found this tutorial &lt;a href=&#34;https://www.freecodecamp.org/news/how-to-configure-your-macos-terminal-with-zsh-like-a-pro-c0ab3f3c1156/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here at freecodecamp&lt;/a&gt; very useful to install and customize iTerm2 in my mac. I have followed almost all of the steps, except the color customization options, where I chose to use &lt;a href=&#34;https://github.com/MartinSeeler/iterm2-material-design&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;material-design by Martin Seeler&lt;/a&gt;. I also liked &lt;a href=&#34;https://draculatheme.com/iterm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Dracula for dark theme&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying in Apache Tomcat via Maven-Tomcat plugin</title>
      <link>https://sajidrahman.github.io/post/maven-tomcat-deployment/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://sajidrahman.github.io/post/maven-tomcat-deployment/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Add the following user-roles and user (specially a user with roles of &lt;code&gt;manager-jmx,manager-script&lt;/code&gt;, see &amp;lsquo;maven&amp;rsquo; user, for example) in tomcat-users.xml file. (Sidenote: you can create a user with &lt;code&gt;manager-gui&lt;/code&gt; role to access Tomcat manager interface from your browser, that&amp;rsquo;s pretty cool and handy!!)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;!--This file is located in %TOMCAT_HOME%/conf/tomcat-users.xml --&amp;gt;
&amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&amp;gt;
&amp;lt;tomcat-users&amp;gt;

  &amp;lt;role rolename=&amp;quot;manager-gui&amp;quot;/&amp;gt;
  &amp;lt;role rolename=&amp;quot;manager-script&amp;quot;/&amp;gt;
  &amp;lt;role rolename=&amp;quot;manager-jmx&amp;quot;/&amp;gt;
  &amp;lt;user username=&amp;quot;admin&amp;quot; password=&amp;quot;tomcat&amp;quot; roles=&amp;quot;manager-gui&amp;quot;/&amp;gt;
  &amp;lt;user username=&amp;quot;maven&amp;quot; password=&amp;quot;tomcat&amp;quot; roles=&amp;quot;manager-jmx,manager-script&amp;quot;/&amp;gt;

&amp;lt;/tomcat-users&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Add above Tomcat’s user (&amp;lsquo;maven&amp;rsquo; user in this case) in the Maven setting file, later Maven will use this user to login Tomcat server.( N.B. In case of a project running in IntelliJ, view/create maven settings.xml file from POM &amp;ndash;&amp;gt; MAVEN &amp;ndash;&amp;gt; Open Settings.xml (Or Create Settings.xml, if settings.xml is not present).)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;settings xmlns=&amp;quot;http://maven.apache.org/SETTINGS/1.0.0&amp;quot;
          xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
          xsi:schemaLocation=&amp;quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&amp;quot;&amp;gt;
    &amp;lt;servers&amp;gt;

        &amp;lt;server&amp;gt;
            &amp;lt;id&amp;gt;TomcatServer&amp;lt;/id&amp;gt;
            &amp;lt;username&amp;gt;root&amp;lt;/username&amp;gt;
            &amp;lt;password&amp;gt;tomcat&amp;lt;/password&amp;gt;
        &amp;lt;/server&amp;gt;

    &amp;lt;/servers&amp;gt;
&amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Declare a maven-tomcat plugin in pom.xml.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;	&amp;lt;plugin&amp;gt;
		&amp;lt;groupId&amp;gt;org.apache.tomcat.maven&amp;lt;/groupId&amp;gt;
		&amp;lt;artifactId&amp;gt;tomcat7-maven-plugin&amp;lt;/artifactId&amp;gt;
		&amp;lt;version&amp;gt;2.2&amp;lt;/version&amp;gt;
		&amp;lt;configuration&amp;gt;
			&amp;lt;url&amp;gt;http://localhost:8080/manager/text&amp;lt;/url&amp;gt;
			&amp;lt;server&amp;gt;TomcatServer&amp;lt;/server&amp;gt;
			&amp;lt;path&amp;gt;/mycoolapp&amp;lt;/path&amp;gt;
		&amp;lt;/configuration&amp;gt;
	&amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we are configuring maven-tomcat plugin to access TomcatServer with credentials defined in maven&amp;rsquo;s settings.xml file and deploy our app in this context path &lt;strong&gt;/mycoolapp&lt;/strong&gt;.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;Run Tomcat Server (from command line &lt;code&gt;%TOMCAT_HOME%/bin/startup.sh&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now execute this command in terminal after going to your project directory: &lt;code&gt;maven tomcat7:deploy&lt;/code&gt; to deploy your war file in Tomcat. You should get a &lt;strong&gt;BUILD SUCCESS&lt;/strong&gt; message if everything goes well.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Install SonarQube on MacOSX</title>
      <link>https://sajidrahman.github.io/post/install-sonar-on-macosx/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://sajidrahman.github.io/post/install-sonar-on-macosx/</guid>
      <description>&lt;h2 id=&#34;steps&#34;&gt;Steps:&lt;/h2&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;Make sure you have &lt;code&gt;homebrew&lt;/code&gt; installed in your machine, otherwise follow instrunctions at &lt;a href=&#34;https://brew.sh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;brew.sh&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Open terminal, run &lt;code&gt;brew install sonar&lt;/code&gt;. Assuming brew installs SonarQube successfully, take a look at the last line of the terminal where the SonarQube location is printed. In my case it is &lt;code&gt;/usr/local/Cellar/sonarqube/7.1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now run &lt;code&gt;brew install sonar-scanner&lt;/code&gt; (N.B. sonar-runner is no longer available, it&amp;rsquo;s replaced by sonar-scanner).&lt;/li&gt;
&lt;li&gt;After installation is complete, run the following commands consecutively:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;  export SONAR_HOME=/usr/local/Cellar/sonar-scanner/3.2.0.1227/libexec
  export SONAR=$SONAR_HOME/bin
  export PATH=$SONAR:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[Note: exporting path in this way will work for the current session of terminal, for permanent use, I need to transfer these path variables to .bashrc file.]&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Now we can run SonarQube from terminal by issuing this command &lt;code&gt;/usr/local/opt/sonarqube/bin/sonar console&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Go to http://localhost:9000/ (or appropriate port based on your system) to view the main page of SonarQube. Use this credentials (username: admin, password: admin) to login.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;References (a bit deprecated):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://zafercelaloglu.blogspot.com/2014/07/how-to-setup-sonar-on-mac-part-1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to Setup SonarQube on Mac Part-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.managerjs.com/blog/2015/11/install-sonar-locally-on-osx-and-analyze-a-javascript-project/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Install Sonar Locally on OSX &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Latex Hacks - Bag of Tricks</title>
      <link>https://sajidrahman.github.io/post/latex-tricks/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://sajidrahman.github.io/post/latex-tricks/</guid>
      <description>&lt;h3 id=&#34;steps-to-highlight-certain-bibliography-items-with-asterisk-for-example-marks&#34;&gt;Steps to Highlight certain bibliography items with asterisk (for example) marks&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;keywords={important}&lt;/code&gt; in a particular entry in &lt;code&gt;.bib&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@inproceedings{bar,
    author       = {Bar},
    title        = {Bar},
    booktitle    = {Bar},
    year         = {2017},
    keywords     = {important},
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the following command in the preamble section&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\renewbibmacro*{begentry}{\ifkeyword{important}{\makebox[0pt][r]{\textasteriskcentered\addspace}}{}}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Voila! &lt;a href=&#34;https://tex.stackexchange.com/questions/402765/how-do-i-mark-bibliography-entries-in-the-margin?rq=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-to-add-markdown-support-in-latex&#34;&gt;How to Add Markdown Support in Latex&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add &lt;code&gt;markdown&lt;/code&gt;package in the preamble&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;\usepackage[T1]{fontenc}
\usepackage[hybrid,smartEllipses]{markdown}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now you can create a markdown file, add all your contents and style in makrdown and link the &lt;code&gt;.md&lt;/code&gt; file in the document section of your latex file using this command &lt;code&gt;\markdownInput{objective.md}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;With the &lt;code&gt;hybrid&lt;/code&gt; parameter, you can use latex code inside your markdown. Also, you need to escape latex-special characters if you choose to use hybrid parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For compiling, you need to add &lt;code&gt;--shell-escape&lt;/code&gt;parameter from command-line like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-clike&#34;&gt;pdflatex --shell-escape main.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also use a makefile, if you want to generate bibliography. Here&amp;rsquo;s a sample Makefile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;notarealfile.pdf:
	pdflatex --shell-escape main.tex
	bibtex main
	pdflatex --shell-escape main
	pdflatex --shell-escape main

clean:
	rm -f *.pdf
	rm -f *.dvi
	rm -f *.toc
	rm -f *.aux
	rm -f *.bbl
	rm -f *.log
	rm -f *.blg
	rm -f *.bak
	rm -f *.out
	rm -f *.ps
	rm -f *.synctex.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For more, check &lt;a href=&#34;https://www.overleaf.com/learn/how-to/Writing_Markdown_in_LaTeX_Documents&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;overleaf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Miscellaneous and Handy Java Functions</title>
      <link>https://sajidrahman.github.io/post/useful-java-functions/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://sajidrahman.github.io/post/useful-java-functions/</guid>
      <description>&lt;h3 id=&#34;object-orderingcomparing&#34;&gt;Object Ordering/Comparing:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;code&gt;List l&lt;/code&gt; can be sorted as follows:
&lt;code&gt;Collections.sort(l)&lt;/code&gt;. If the &lt;code&gt;List&lt;/code&gt; consists of built-in class objects, e.g. &lt;code&gt;String, Integer, Long, Date, Character, File&lt;/code&gt; etc., then the objects will be sorted in a way of &lt;em&gt;natural&lt;/em&gt; ordering of that class. But for objects from custom classes, our class needs to either implement &lt;code&gt;Comparable&lt;/code&gt; interface or it can implement &lt;code&gt;Comparator&lt;/code&gt; interface to provide a custom comparator for &lt;code&gt;Collections.sort(list, comparator)&lt;/code&gt; method. The following example is adapted from &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/collections/interfaces/order.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Oracle&amp;rsquo;s tutorial&lt;/a&gt; page.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
import java.util.*;
public class EmpSort {
  //we can either define a comparator here
    static final Comparator&amp;lt;Employee&amp;gt; SENIORITY_ORDER =
                                        new Comparator&amp;lt;Employee&amp;gt;() {
            public int compare(Employee e1, Employee e2) {
                return e2.hireDate().compareTo(e1.hireDate());
            }
    };

    // Employee database
    static final Collection&amp;lt;Employee&amp;gt; employees = ... ;

    public static void main(String[] args) {
        List&amp;lt;Employee&amp;gt; employeeList = new ArrayList&amp;lt;Employee&amp;gt;(employees);
        //Collections.sort(employeeList,  SENIORITY_ORDER);
        // Or we can define comparator in-line with the sort method, as shown below
        @Override
        Collections.sort(employeeList, new Comparator&amp;lt;Employee&amp;gt;() {
            public int compare(Employee e1, Employee e2) {
                return e2.hireDate().compareTo(e1.hireDate());
            }
    });
        System.out.println(employeeList);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Similar to &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;java.util.Arrays&lt;/code&gt; also provides convenient &lt;code&gt;sort()&lt;/code&gt; method for ordering primitive data types. For example, the following example sorts an integer array in &lt;code&gt;O(n log(n))&lt;/code&gt;. The sort method here implements a [dual-pivot Quicksort](&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#sort%28int[]%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#sort(int[])&lt;/a&gt; algorithm.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
import java.util.Arrays;

public class SortExample
{
    public static void main(String[] args)
    {
        int[] arr = {13, 77, 609, 45, 21, 9, 101, 102, -101, 30};

        Arrays.sort(arr);

        System.out.printf(&amp;quot;Modified arr[] : %s&amp;quot;, Arrays.toString(arr));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;conversion&#34;&gt;Conversion&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;String to Character array:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
String string = &amp;quot;Hello world!&amp;quot;;
char[] stringToCharArray = string.toCharArray();
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
